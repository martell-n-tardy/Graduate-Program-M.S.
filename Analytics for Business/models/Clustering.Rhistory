library("cluster", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
cluster=prep
d=daisy(cluster,metric=c("gower"))
prep1=prep
d=daisy(prep1,metric=c("gower"))
library(cluster)
prep1=prep
d=daisy(prep1,metric=c("gower"))
distance=dist(d)
clusters=rep(0,10)
for(i in 1:10){
clusters[i]=((wss[i]-wss[i+1])/wss[i])*100}
plot(2:11,clusters,type="b",
xlab="Number of Clusters",
ylab="clusters in percentage")
library(cluster)
clusters=rep(0,10)
for(i in 1:10){
clusters[i]=((wss[i]-wss[i+1])/wss[i])*100}
plot(2:11,clusters,type="b",
xlab="Number of Clusters",
ylab="Clusters in Percentage")
prep1=prep
d=daisy(prep1,metric=c("gower"))
install.packages("gower")
prep1=prep
d=daisy(prep1,metric=c("gower"))
prep1<-prep
d=daisy(prep1,metric=c("gower"))
set.seed(1)
wss=rep(0,11)
plot(1:10,wss[1:10],type="b",
xlab="Number of Clusters",
ylab="Within Cluster Sum of Squares")
d=daisy(prep,metric=c("gower"))
distance=dist(d)
View(prep1)
n=ncol(prep)
m=nrow(data)
for(i in 1:n){
for(j in 1:m){
if(grepl("^[0-9]+[-]",data[,i][j])==TRUE){
data[,i]=as.character(data[,i])
data[,i][j]=paste(data[,i][j],"r")
}
data[,i]=as.factor()
data[,i]=as.factor(data[,i])}
}
n=ncol(prep)
m=nrow(data)
for(i in 1:n){
for(j in 1:m){
if(grepl("^[0-9]+[-]",[,i][j])==TRUE){}
n=ncol(prep)
m=nrow(prep)
for(i in 1:n){
for(j in 1:m){
if(grepl("^[0-9]+[-]",prep[,i][j])==TRUE){
prep[,i]=as.character(prep[,i])
prep[,i][j]=paste(prep[,i][j],"r")
}
prep[,i]=as.factor(prep[,i])}
}
View(prep)
prep1=prep
library(cluster)
d = daisy(prep1,metric = c("gower"))
distance = dist(d)
set.seed(1)
wss=rep(0,11)
for(i in 1:11){
kmeans.model=kmeans(d,i)
wss[i]=kmeans.model$tot.withinss}
wss=rep(0,11)
clusters=rep(0,10)
for(i in 1:10){
clusters[i]=((wss[i]-wss[i+1])/wss[i])*100}
plot(2:11,clusters,type="b",
xlab="Number of Clusters",
ylab="clusters in percentage")
View(cluster)
dim(use)
general <- read.delim("~/Desktop/final_general.txt",stringsAsFactors = TRUE)
dim(general)
use <- read.delim("~/Desktop/final_use.txt", stringsAsFactors = TRUE)
general=general[,-c(106)]
use=use[,-c(126)]
dim(general)
dim(use)
general=na.omit(general)
use=na.omit(use)
dim(general)
dim(use)
n=ncol(general)
for(i in 1:n){
if(class(general[,i])=="integer"){
general[,-i]=ifelse(general[,i]==0,"No","Yes")
general,i]=as.factor(general[,i])}
n=ncol(general)
for(i in 1:n){
if(class(general[,i])=="integer"){
general[,-i]=ifelse(general[,i]==0,"No","Yes")
general,[,i]=as.factor(general[,i])}
n=ncol(general)
for(i in 1:n){
if(class(general[,i])=="integer"){
general[,i]=ifelse(general[,i]==0,"N","Y")
general[,i]=as.factor(general[,i])}
}
View(general)
n=ncol(use)
for(i in 1:n){
if(class(use[,i])=="integer"){
use[,i]=ifelse(use[,i]==0,"N","Y")
use[,i]=as.factor(use[,i])}
}
View(use)
intersect(names(general),names(use))
length(general$who)
length(unique(general$who))
length(use$who)
length(unique(use$who))
suppressMessages(library(data.table))
general2=data.table(general)
class(general)
use2=data.table(use)
class(use)
setkey(general2,who)
setkey(use2,who)
prep=merge(general2,use2)
dim(prep)
prep=as.data.frame(prep)
View(prep)
n=ncol(prep)
equal=numeric()
for(i in 1:n){
if(length(levels(prep[,i]))==1){
equal=c(equal,i)}
}
str(prep[,equal])
new_prep=prep[,-equal]
rownames(new_prep)=new_prep[,1]
prep=new_prep[,-1]
write.csv(prep,"prep.csv")
write.csv(prep, file = "c:\\Desktop\\prep.csv", row.names = FALSE)
write.csv(file=prep,x="prep.csv")
write.csv(Prep, file = "Prep.csv")
write.csv(prep, file = "Prep.csv")
install.packages("rio")
library("rio", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
export(prep, "Prep.csv")
library(rio)
detach("package:rio", unload=TRUE)
library("rio", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
detach("package:rio", unload=TRUE)
install.packages("curl")
library(rio)
install.packages("curl")
library("curl", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library(rio)
export(prep, "Prep.csv")
write.csv(prep, "c:/Prep.csv")
library(xlsx)
write.xlsx(prep, "c:/Prep.xlsx")
save.image("~/Final Project.RData")
View(prep)
write.csv(prep, file = "~/Desktop/prep.csv", row.names = FALSE)
write.csv(new_prep, file = "~/Desktop/Prep.csv", row.names = FALSE)
n=ncol(new_prep)
m=nrow(new_prep)
for(i in 1:n){
for(j in 1:m){
if(grepl("^[0-9]+[-]",new_prep[,i][j])==TRUE){
new_prep[,i]=as.character(new_prep[,i])
new_prep[,i][j]=paste(new_prep[,i][j],"r")
}
new_prep[,i]=as.factor(new_prep[,i])}
}
write.csv(new_prep, file = "~/Desktop/Prep.csv", row.names = FALSE)
Prep <- read.csv("~/Desktop/Prep.csv", stringsAsFactors=FALSE)
View(Prep)
Cluster=Prep
library(cluster)
c=daisy(Cluster,metric=c("gower"))
Cluster=Prep
library(FactoMineR)
install.packages("FactoMineR")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
wss <- (nrow(Cluster)-1)*sum(apply(Cluster,2,var))
for (i in 2:15) wss[i] <- sum(kmeans(Cluster,
centers=i)$withinss)
c=daisy(Cluster,metric = c("gower"))
c=daisy(Cluster, metric = gower)
c=daisy(Cluster, metric = "gower")
c=daisy(Cluster, metric = "euclidean")
write.csv(new_prep, file = "~/Desktop/Prep2.csv", row.names = FALSE)
prep <- read.csv("~/Desktop/prep.csv")
View(prep)
c=daisy(Cluster, metric = "gower")
prep <- read.csv("~/Desktop/prep.csv", row.names=1)
View(prep)
c=daisy(Cluster, metric = "gower")
warnings()
Cluster=na.omit(prep)
View(Cluster)
c=daisy(Cluster, metric = "gower")
distance=dist(c)
set.seed(1)
wss=rep(0,11)
for(i in 1:11){
kmeans.model=kmeans(d,i)
wss[i]=kmeans.model$tot.withinss}
for(i in 1:11){
kmeans.model=kmeans(c,i)
wss[i]=kmeans.model$tot.withinss}
plot(1:10,wss[1:10],type="b",
xlab="Number of Clusters",
ylab="Within Cluster_Sum of Squares")
wss.drop=rep(0,10)
wss_percentage=rep(0,10)
for(i in 1:10){
wss_percentage[i]=(wss[i]-wss[i+1]/wss[i])*100}
plot(1:10,wss_percentage,type="b",
xlab="Number of Clusters",
ylab="Wss_Percentage")
wssplot(df)
set.seed(1)
hclust=hclust(distance,method = "complete")
plot(hclust)
Groups=cutree(hclust,k=3)
Cluster$group=Groups
Cluster$group=as.factor(Cluster$group)
levels(Cluster$group)=c("Cluster1","Cluster2","Cluster3")
table(Cluster$group)
prop.table(table(> Groups=cutree(hclust,k=3)
> Cluster$group=Groups
> Cluster$group=as.factor(Cluster$group)
> levels(Cluster$group)=c("Cluster1","Cluster2","Cluster3")
> table(Cluster$group)
Cluster1 Cluster2 Cluster3
2553      467       64 ))
prop.table(table(Cluster$group))
plot(silhouette(Groups,distance))
plot(Cluster1)
kmeansresults<-kmeans(Groups)
kmeansresults<-kmeans(Cluster$group)
kmeansresults<-table(Cluster$group)
x<-kmeansresults$groups
kmeansresults<-kmeans(dataframe)
kmeansresults=table(Cluster$group)
write.csv(kmeansresults, file="~name_of_file.csv")
write.csv(kmeansresults, file="~ Desktop/Cluster1_2_3.csv",row.names = FALSE)
write.csv(kmeansresults, file="~/Desktop/Cluster1_2_3.csv",row.names = FALSE)
kmeansresults=hclust
write.csv(kmeansresults, file="~/Desktop/Cluster1_2_3.csv",row.names = FALSE)
View(hclust)
plot(hclust)
x=as.data.frame(hclust)
hh1 = hclust(dist(dataMatrix))
hh1 = hclust(dist(hclust))
library(readr)
EED_3 <- read_csv("Desktop/EED_Tournaments.csv")
View(EED_3)
min(EED_3$`# of Total Tournaments`)
max(EED_3$`# of Total Tournaments`)
max(EED_3$`# of Total Players`)
max(EED_3$`Game Prize Money Available`)
max(EED_3$`Game Prize Money Available`)
min(EED_3$`Game Prize Money Available`)
library(readr)
EED_3 <- read_csv("Desktop/EED_Tournaments.csv")
View(EED_3)
max(EED_3$`Game Prize Money Available`)
library(readr)
EED_2 <- read_csv("Desktop/EED_OverallEarnings.csv")
View(EED_2)
class(EED_3)
EED3 =  data.table(EED_3)
suppressMessages(library(data.table))
EED3 =  data.table(EED_3)
class(EED3)
EED2 =  data.table(EED_2)
class(EED2)
setkey(EED2$`Player ID`)
PlayerID = (EED_2$`Player ID`, EED_2$`Highest Paying Game`)
setkey(EED2,`Player ID`)
setkey(EED2, 'Highest Paying Game')
PlayerID = merge(EED2)
PlayerID = merge(EED2,EED2)
View(EED2)
PlayerID = (EED_2$`Player ID`)
HPG = (EED_2$`Highest Paying Game`)
MergeEED2 = (PlayerID, HPG)
MergeEED2 = merge(PlayerID, HPG)
View(MergeEED2)
class(MergeEED2)
dim(MergeEED2)
length(unique(MergeEED2$x))
EED_2[which(EED_2$`Highest Paying Game`== 'Dota 2'),]
Dota2 = EED_2[which(EED_2$`Highest Paying Game`== 'Dota 2'),]
View(Dota2)
library(readr)
EED_OverallEarnings <- read_csv("Desktop/EED_OverallEarnings.csv")
View(EED_OverallEarnings)
EED_2 <- EED_OverallEarnings
View(EED_2)
Dota2 = EED_2[which(EED_2$`Highest Paying Game`== 'Dota 2'),]
View(Dota2)
max(Dota2$`Total (Game): Total Prize Money Player Won`)
CounterStrikeGO = EED_2[which(EED_2$`Highest Paying Game`== 'Counter-Strike: Global Offensive'),]
View(CounterStrikeGO)
max(CounterStrikeGO)
max(CounterStrikeGO$`Total (Game): Total Prize Money Player Won`)
LeagueofLegends = EED_2[which(EED_2$`Highest Paying Game`== 'League of Legends'),]
View(LeagueofLegends)
max(LeagueofLegends$`Total (Game): Total Prize Money Player Won`)
library(cluster)
wss = rep(0,10)
StarCraft2 = EED_2[which(EED_2$`Highest Paying Game`== 'StarCraft II'),]
View(StarCraft2)
max(StarCraft2$`Total (Game): Total Prize Money Player Won`)
library(readr)
EED_1 <- read_csv("Desktop/EED_ConsolePlayers.csv")
View(EED_1)
library(readr)
TGD <- read_csv("Desktop/Top Games Dataset.csv")
View(TGD)
dim(TGD)
library(readr)
Top_Games_Dataset <- read_csv("Desktop/Top Games Dataset.csv")
View(Top_Games_Dataset)
TGD <- Top_Games_Dataset
View(TGD)
library(readr)
dataset <- read_csv(NULL)
View(dataset)
library(readr)
TGD <- read_csv("Desktop/Top Games Dataset.csv")
View(TGD)
dim(TGD)
count(TGD$PC)
library(dplyr)
count(TGD$PC)
count(group_by(TGD$PC))
group_by(TGD$PC)
shiny::runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp')
runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp')
library(readr)
CompleteDataset <- read_csv("Desktop/CompleteDataset.csv")
View(CompleteDataset)
C <- data.frame(CompleteDataset[,-1], row.names = CompleteDataset$GameTitle)
Complete2<-mutate_if(C,is.character,as.factor)
library(dplyr)
Complete2<-mutate_if(C,is.character,as.factor)
Complete3<-mutate_if(Complete2,is.integer,as.double)
rownames(Complete3)<-CompleteDataset$GameTitle
glimpse(Complete3)
runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp')
runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp')
View(Complete3)
View(Complete)
runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp')
runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp')
runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp')
runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp')
runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp')
runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp')
runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp')
runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp')
runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp')
runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp')
library(cluster)
gd=daisy(Complete3, metric = c("gower"))
distance = dist(gd)
summary(gd)
save.image("~/Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp/RCode.RData")
runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp')
runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp')
runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp')
runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp')
runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp')
runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp')
runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp')
sil_width<-c(NA)
for(i in 2:10){
pam_fit <- pam(gd,
diss = TRUE,
k = i)
sil_width[i] <- pam_fit$silinfo$avg.width
}
plot(1:10, sil_width,
xlab = "Number of Clusters",
ylab = "Silhouette Width")
lines(1:10, sil_width)
save.image("~/Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/RCode.RData")
runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp')
runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp')
runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp')
runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp')
runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp')
runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp')
pam_fit<-pam(gd, diss = TRUE, k = 5)
runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp')
summary(gd)
runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp')
save.image("~/Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp/RCode.RData")
load("~/Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/R Code Monday8.8.18.R")
load("~/Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/Tuesday8.9.18.RData")
load("~/Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/Capstone_Tardy/server.R")
load("~/Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/Capstone_Tardy/Capstone_Tardy/ui.R")
load("~/Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/Monday Datasets8.8.18.RData")
load("~/Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp/RCode.RData")
runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp/Monday23.R')
runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp/Monday23.R')
runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp/Monday23.R')
runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp/Monday23.R')
runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp/Monday23.R')
runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp/Monday23.R')
load("~/Final Project.RData")
results<-Complete3%>%
mutate(cluster = pam_fit$clustering)%>%
group_by(cluster)%>%
do(the_summary = summary(.))
library(dplyr)
results<-Complete3%>%
mutate(cluster = pam_fit$clustering)%>%
group_by(cluster)%>%
do(the_summary = summary(.))
results$the_summary
shiny::runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp')
runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp')
runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp')
runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp')
runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp')
runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp')
runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp')
runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp')
runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp')
runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp')
runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp')
runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp')
runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp')
runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp')
runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp')
runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp')
shiny::runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp')
runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp/Monday23.R')
runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp')
runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp/Monday23.R')
runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp')
summary(gd)
runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp')
runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp')
runApp('Part2')
runApp('Part2')
runApp('Part2')
runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp')
runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp/Monday23.R')
runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp')
runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp')
runApp('Part2')
runApp('Part2')
runApp('Part2')
runApp('Part2')
runApp('Part2')
runApp('Part2')
runApp('Part2')
runApp('Part2')
runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/FinalApp')
runApp('Part2')
runApp('Part2')
runApp('Part2')
runApp('Part2')
runApp('Part2')
runApp('Part2')
runApp('Part2')
runApp('Part2')
runApp('Part2')
runApp('Part2')
runApp('Part2')
runApp('Part2')
runApp('Part2')
runApp('Part2')
runApp('Part2')
runApp('Part2')
runApp('Part2')
runApp('Part2')
runApp('Part2')
runApp('Part2')
runApp('Part2')
runApp('Part2')
runApp('Part2')
runApp('Part2')
runApp('Part2')
runApp('Part2')
runApp('Part2')
runApp('Part2')
runApp('Part2')
runApp('Part2')
library(dplyr)
results<-Complete3%>%
mutate(cluster = pam_fit$clustering)%>%
group_by(cluster)%>%
do(the_summary = summary(.))
results$the_summary
runApp('Part2')
runApp('Part2')
runApp('Part2')
runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone')
runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone')
runApp('Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone')
savehistory("~/Desktop/GRAD SCHOOL/FA18/CAPSTONE Project/R_Capstone/Capstone/History.Rhistory")
